/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package se.lth.cs.docforia.io.thrift;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-11-03")
public class TEdges implements org.apache.thrift.TBase<TEdges, TEdges._Fields>, java.io.Serializable, Cloneable, Comparable<TEdges> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TEdges");

  private static final org.apache.thrift.protocol.TField BUILTIN_FIELD_DESC = new org.apache.thrift.protocol.TField("builtin", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField VARIANTS_FIELD_DESC = new org.apache.thrift.protocol.TField("variants", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField NUMENTRIES_FIELD_DESC = new org.apache.thrift.protocol.TField("numentries", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField SETS_FIELD_DESC = new org.apache.thrift.protocol.TField("sets", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField KEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("keys", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField COLUMNS_FIELD_DESC = new org.apache.thrift.protocol.TField("columns", org.apache.thrift.protocol.TType.LIST, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TEdgesStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TEdgesTupleSchemeFactory());
  }

  /**
   * 
   * @see TEdgeTypes
   */
  public TEdgeTypes builtin; // optional
  public String name; // optional
  public List<String> variants; // required
  public List<Integer> numentries; // required
  public List<TPropertySet> sets; // required
  public List<TPropertyKey> keys; // required
  public List<TColumn> columns; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TEdgeTypes
     */
    BUILTIN((short)1, "builtin"),
    NAME((short)2, "name"),
    VARIANTS((short)3, "variants"),
    NUMENTRIES((short)4, "numentries"),
    SETS((short)5, "sets"),
    KEYS((short)6, "keys"),
    COLUMNS((short)7, "columns");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BUILTIN
          return BUILTIN;
        case 2: // NAME
          return NAME;
        case 3: // VARIANTS
          return VARIANTS;
        case 4: // NUMENTRIES
          return NUMENTRIES;
        case 5: // SETS
          return SETS;
        case 6: // KEYS
          return KEYS;
        case 7: // COLUMNS
          return COLUMNS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.BUILTIN,_Fields.NAME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BUILTIN, new org.apache.thrift.meta_data.FieldMetaData("builtin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TEdgeTypes.class)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VARIANTS, new org.apache.thrift.meta_data.FieldMetaData("variants", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.NUMENTRIES, new org.apache.thrift.meta_data.FieldMetaData("numentries", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.SETS, new org.apache.thrift.meta_data.FieldMetaData("sets", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPropertySet.class))));
    tmpMap.put(_Fields.KEYS, new org.apache.thrift.meta_data.FieldMetaData("keys", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPropertyKey.class))));
    tmpMap.put(_Fields.COLUMNS, new org.apache.thrift.meta_data.FieldMetaData("columns", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TColumn.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TEdges.class, metaDataMap);
  }

  public TEdges() {
  }

  public TEdges(
    List<String> variants,
    List<Integer> numentries,
    List<TPropertySet> sets,
    List<TPropertyKey> keys,
    List<TColumn> columns)
  {
    this();
    this.variants = variants;
    this.numentries = numentries;
    this.sets = sets;
    this.keys = keys;
    this.columns = columns;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TEdges(TEdges other) {
    if (other.isSetBuiltin()) {
      this.builtin = other.builtin;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetVariants()) {
      List<String> __this__variants = new ArrayList<String>(other.variants);
      this.variants = __this__variants;
    }
    if (other.isSetNumentries()) {
      List<Integer> __this__numentries = new ArrayList<Integer>(other.numentries);
      this.numentries = __this__numentries;
    }
    if (other.isSetSets()) {
      List<TPropertySet> __this__sets = new ArrayList<TPropertySet>(other.sets.size());
      for (TPropertySet other_element : other.sets) {
        __this__sets.add(new TPropertySet(other_element));
      }
      this.sets = __this__sets;
    }
    if (other.isSetKeys()) {
      List<TPropertyKey> __this__keys = new ArrayList<TPropertyKey>(other.keys.size());
      for (TPropertyKey other_element : other.keys) {
        __this__keys.add(new TPropertyKey(other_element));
      }
      this.keys = __this__keys;
    }
    if (other.isSetColumns()) {
      List<TColumn> __this__columns = new ArrayList<TColumn>(other.columns.size());
      for (TColumn other_element : other.columns) {
        __this__columns.add(new TColumn(other_element));
      }
      this.columns = __this__columns;
    }
  }

  public TEdges deepCopy() {
    return new TEdges(this);
  }

  @Override
  public void clear() {
    this.builtin = null;
    this.name = null;
    this.variants = null;
    this.numentries = null;
    this.sets = null;
    this.keys = null;
    this.columns = null;
  }

  /**
   * 
   * @see TEdgeTypes
   */
  public TEdgeTypes getBuiltin() {
    return this.builtin;
  }

  /**
   * 
   * @see TEdgeTypes
   */
  public TEdges setBuiltin(TEdgeTypes builtin) {
    this.builtin = builtin;
    return this;
  }

  public void unsetBuiltin() {
    this.builtin = null;
  }

  /** Returns true if field builtin is set (has been assigned a value) and false otherwise */
  public boolean isSetBuiltin() {
    return this.builtin != null;
  }

  public void setBuiltinIsSet(boolean value) {
    if (!value) {
      this.builtin = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public TEdges setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getVariantsSize() {
    return (this.variants == null) ? 0 : this.variants.size();
  }

  public java.util.Iterator<String> getVariantsIterator() {
    return (this.variants == null) ? null : this.variants.iterator();
  }

  public void addToVariants(String elem) {
    if (this.variants == null) {
      this.variants = new ArrayList<String>();
    }
    this.variants.add(elem);
  }

  public List<String> getVariants() {
    return this.variants;
  }

  public TEdges setVariants(List<String> variants) {
    this.variants = variants;
    return this;
  }

  public void unsetVariants() {
    this.variants = null;
  }

  /** Returns true if field variants is set (has been assigned a value) and false otherwise */
  public boolean isSetVariants() {
    return this.variants != null;
  }

  public void setVariantsIsSet(boolean value) {
    if (!value) {
      this.variants = null;
    }
  }

  public int getNumentriesSize() {
    return (this.numentries == null) ? 0 : this.numentries.size();
  }

  public java.util.Iterator<Integer> getNumentriesIterator() {
    return (this.numentries == null) ? null : this.numentries.iterator();
  }

  public void addToNumentries(int elem) {
    if (this.numentries == null) {
      this.numentries = new ArrayList<Integer>();
    }
    this.numentries.add(elem);
  }

  public List<Integer> getNumentries() {
    return this.numentries;
  }

  public TEdges setNumentries(List<Integer> numentries) {
    this.numentries = numentries;
    return this;
  }

  public void unsetNumentries() {
    this.numentries = null;
  }

  /** Returns true if field numentries is set (has been assigned a value) and false otherwise */
  public boolean isSetNumentries() {
    return this.numentries != null;
  }

  public void setNumentriesIsSet(boolean value) {
    if (!value) {
      this.numentries = null;
    }
  }

  public int getSetsSize() {
    return (this.sets == null) ? 0 : this.sets.size();
  }

  public java.util.Iterator<TPropertySet> getSetsIterator() {
    return (this.sets == null) ? null : this.sets.iterator();
  }

  public void addToSets(TPropertySet elem) {
    if (this.sets == null) {
      this.sets = new ArrayList<TPropertySet>();
    }
    this.sets.add(elem);
  }

  public List<TPropertySet> getSets() {
    return this.sets;
  }

  public TEdges setSets(List<TPropertySet> sets) {
    this.sets = sets;
    return this;
  }

  public void unsetSets() {
    this.sets = null;
  }

  /** Returns true if field sets is set (has been assigned a value) and false otherwise */
  public boolean isSetSets() {
    return this.sets != null;
  }

  public void setSetsIsSet(boolean value) {
    if (!value) {
      this.sets = null;
    }
  }

  public int getKeysSize() {
    return (this.keys == null) ? 0 : this.keys.size();
  }

  public java.util.Iterator<TPropertyKey> getKeysIterator() {
    return (this.keys == null) ? null : this.keys.iterator();
  }

  public void addToKeys(TPropertyKey elem) {
    if (this.keys == null) {
      this.keys = new ArrayList<TPropertyKey>();
    }
    this.keys.add(elem);
  }

  public List<TPropertyKey> getKeys() {
    return this.keys;
  }

  public TEdges setKeys(List<TPropertyKey> keys) {
    this.keys = keys;
    return this;
  }

  public void unsetKeys() {
    this.keys = null;
  }

  /** Returns true if field keys is set (has been assigned a value) and false otherwise */
  public boolean isSetKeys() {
    return this.keys != null;
  }

  public void setKeysIsSet(boolean value) {
    if (!value) {
      this.keys = null;
    }
  }

  public int getColumnsSize() {
    return (this.columns == null) ? 0 : this.columns.size();
  }

  public java.util.Iterator<TColumn> getColumnsIterator() {
    return (this.columns == null) ? null : this.columns.iterator();
  }

  public void addToColumns(TColumn elem) {
    if (this.columns == null) {
      this.columns = new ArrayList<TColumn>();
    }
    this.columns.add(elem);
  }

  public List<TColumn> getColumns() {
    return this.columns;
  }

  public TEdges setColumns(List<TColumn> columns) {
    this.columns = columns;
    return this;
  }

  public void unsetColumns() {
    this.columns = null;
  }

  /** Returns true if field columns is set (has been assigned a value) and false otherwise */
  public boolean isSetColumns() {
    return this.columns != null;
  }

  public void setColumnsIsSet(boolean value) {
    if (!value) {
      this.columns = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BUILTIN:
      if (value == null) {
        unsetBuiltin();
      } else {
        setBuiltin((TEdgeTypes)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case VARIANTS:
      if (value == null) {
        unsetVariants();
      } else {
        setVariants((List<String>)value);
      }
      break;

    case NUMENTRIES:
      if (value == null) {
        unsetNumentries();
      } else {
        setNumentries((List<Integer>)value);
      }
      break;

    case SETS:
      if (value == null) {
        unsetSets();
      } else {
        setSets((List<TPropertySet>)value);
      }
      break;

    case KEYS:
      if (value == null) {
        unsetKeys();
      } else {
        setKeys((List<TPropertyKey>)value);
      }
      break;

    case COLUMNS:
      if (value == null) {
        unsetColumns();
      } else {
        setColumns((List<TColumn>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BUILTIN:
      return getBuiltin();

    case NAME:
      return getName();

    case VARIANTS:
      return getVariants();

    case NUMENTRIES:
      return getNumentries();

    case SETS:
      return getSets();

    case KEYS:
      return getKeys();

    case COLUMNS:
      return getColumns();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BUILTIN:
      return isSetBuiltin();
    case NAME:
      return isSetName();
    case VARIANTS:
      return isSetVariants();
    case NUMENTRIES:
      return isSetNumentries();
    case SETS:
      return isSetSets();
    case KEYS:
      return isSetKeys();
    case COLUMNS:
      return isSetColumns();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TEdges)
      return this.equals((TEdges)that);
    return false;
  }

  public boolean equals(TEdges that) {
    if (that == null)
      return false;

    boolean this_present_builtin = true && this.isSetBuiltin();
    boolean that_present_builtin = true && that.isSetBuiltin();
    if (this_present_builtin || that_present_builtin) {
      if (!(this_present_builtin && that_present_builtin))
        return false;
      if (!this.builtin.equals(that.builtin))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_variants = true && this.isSetVariants();
    boolean that_present_variants = true && that.isSetVariants();
    if (this_present_variants || that_present_variants) {
      if (!(this_present_variants && that_present_variants))
        return false;
      if (!this.variants.equals(that.variants))
        return false;
    }

    boolean this_present_numentries = true && this.isSetNumentries();
    boolean that_present_numentries = true && that.isSetNumentries();
    if (this_present_numentries || that_present_numentries) {
      if (!(this_present_numentries && that_present_numentries))
        return false;
      if (!this.numentries.equals(that.numentries))
        return false;
    }

    boolean this_present_sets = true && this.isSetSets();
    boolean that_present_sets = true && that.isSetSets();
    if (this_present_sets || that_present_sets) {
      if (!(this_present_sets && that_present_sets))
        return false;
      if (!this.sets.equals(that.sets))
        return false;
    }

    boolean this_present_keys = true && this.isSetKeys();
    boolean that_present_keys = true && that.isSetKeys();
    if (this_present_keys || that_present_keys) {
      if (!(this_present_keys && that_present_keys))
        return false;
      if (!this.keys.equals(that.keys))
        return false;
    }

    boolean this_present_columns = true && this.isSetColumns();
    boolean that_present_columns = true && that.isSetColumns();
    if (this_present_columns || that_present_columns) {
      if (!(this_present_columns && that_present_columns))
        return false;
      if (!this.columns.equals(that.columns))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_builtin = true && (isSetBuiltin());
    list.add(present_builtin);
    if (present_builtin)
      list.add(builtin.getValue());

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_variants = true && (isSetVariants());
    list.add(present_variants);
    if (present_variants)
      list.add(variants);

    boolean present_numentries = true && (isSetNumentries());
    list.add(present_numentries);
    if (present_numentries)
      list.add(numentries);

    boolean present_sets = true && (isSetSets());
    list.add(present_sets);
    if (present_sets)
      list.add(sets);

    boolean present_keys = true && (isSetKeys());
    list.add(present_keys);
    if (present_keys)
      list.add(keys);

    boolean present_columns = true && (isSetColumns());
    list.add(present_columns);
    if (present_columns)
      list.add(columns);

    return list.hashCode();
  }

  @Override
  public int compareTo(TEdges other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBuiltin()).compareTo(other.isSetBuiltin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuiltin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.builtin, other.builtin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVariants()).compareTo(other.isSetVariants());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVariants()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.variants, other.variants);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumentries()).compareTo(other.isSetNumentries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumentries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numentries, other.numentries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSets()).compareTo(other.isSetSets());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSets()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sets, other.sets);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKeys()).compareTo(other.isSetKeys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keys, other.keys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumns()).compareTo(other.isSetColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, other.columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TEdges(");
    boolean first = true;

    if (isSetBuiltin()) {
      sb.append("builtin:");
      if (this.builtin == null) {
        sb.append("null");
      } else {
        sb.append(this.builtin);
      }
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("variants:");
    if (this.variants == null) {
      sb.append("null");
    } else {
      sb.append(this.variants);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("numentries:");
    if (this.numentries == null) {
      sb.append("null");
    } else {
      sb.append(this.numentries);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sets:");
    if (this.sets == null) {
      sb.append("null");
    } else {
      sb.append(this.sets);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("keys:");
    if (this.keys == null) {
      sb.append("null");
    } else {
      sb.append(this.keys);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("columns:");
    if (this.columns == null) {
      sb.append("null");
    } else {
      sb.append(this.columns);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TEdgesStandardSchemeFactory implements SchemeFactory {
    public TEdgesStandardScheme getScheme() {
      return new TEdgesStandardScheme();
    }
  }

  private static class TEdgesStandardScheme extends StandardScheme<TEdges> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TEdges struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BUILTIN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.builtin = se.lth.cs.docforia.io.thrift.TEdgeTypes.findByValue(iprot.readI32());
              struct.setBuiltinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VARIANTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list208 = iprot.readListBegin();
                struct.variants = new ArrayList<String>(_list208.size);
                String _elem209;
                for (int _i210 = 0; _i210 < _list208.size; ++_i210)
                {
                  _elem209 = iprot.readString();
                  struct.variants.add(_elem209);
                }
                iprot.readListEnd();
              }
              struct.setVariantsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NUMENTRIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list211 = iprot.readListBegin();
                struct.numentries = new ArrayList<Integer>(_list211.size);
                int _elem212;
                for (int _i213 = 0; _i213 < _list211.size; ++_i213)
                {
                  _elem212 = iprot.readI32();
                  struct.numentries.add(_elem212);
                }
                iprot.readListEnd();
              }
              struct.setNumentriesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SETS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list214 = iprot.readListBegin();
                struct.sets = new ArrayList<TPropertySet>(_list214.size);
                TPropertySet _elem215;
                for (int _i216 = 0; _i216 < _list214.size; ++_i216)
                {
                  _elem215 = new TPropertySet();
                  _elem215.read(iprot);
                  struct.sets.add(_elem215);
                }
                iprot.readListEnd();
              }
              struct.setSetsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // KEYS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list217 = iprot.readListBegin();
                struct.keys = new ArrayList<TPropertyKey>(_list217.size);
                TPropertyKey _elem218;
                for (int _i219 = 0; _i219 < _list217.size; ++_i219)
                {
                  _elem218 = new TPropertyKey();
                  _elem218.read(iprot);
                  struct.keys.add(_elem218);
                }
                iprot.readListEnd();
              }
              struct.setKeysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // COLUMNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list220 = iprot.readListBegin();
                struct.columns = new ArrayList<TColumn>(_list220.size);
                TColumn _elem221;
                for (int _i222 = 0; _i222 < _list220.size; ++_i222)
                {
                  _elem221 = new TColumn();
                  _elem221.read(iprot);
                  struct.columns.add(_elem221);
                }
                iprot.readListEnd();
              }
              struct.setColumnsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TEdges struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.builtin != null) {
        if (struct.isSetBuiltin()) {
          oprot.writeFieldBegin(BUILTIN_FIELD_DESC);
          oprot.writeI32(struct.builtin.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.variants != null) {
        oprot.writeFieldBegin(VARIANTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.variants.size()));
          for (String _iter223 : struct.variants)
          {
            oprot.writeString(_iter223);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.numentries != null) {
        oprot.writeFieldBegin(NUMENTRIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.numentries.size()));
          for (int _iter224 : struct.numentries)
          {
            oprot.writeI32(_iter224);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.sets != null) {
        oprot.writeFieldBegin(SETS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sets.size()));
          for (TPropertySet _iter225 : struct.sets)
          {
            _iter225.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.keys != null) {
        oprot.writeFieldBegin(KEYS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.keys.size()));
          for (TPropertyKey _iter226 : struct.keys)
          {
            _iter226.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.columns != null) {
        oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.columns.size()));
          for (TColumn _iter227 : struct.columns)
          {
            _iter227.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TEdgesTupleSchemeFactory implements SchemeFactory {
    public TEdgesTupleScheme getScheme() {
      return new TEdgesTupleScheme();
    }
  }

  private static class TEdgesTupleScheme extends TupleScheme<TEdges> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TEdges struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBuiltin()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetVariants()) {
        optionals.set(2);
      }
      if (struct.isSetNumentries()) {
        optionals.set(3);
      }
      if (struct.isSetSets()) {
        optionals.set(4);
      }
      if (struct.isSetKeys()) {
        optionals.set(5);
      }
      if (struct.isSetColumns()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetBuiltin()) {
        oprot.writeI32(struct.builtin.getValue());
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetVariants()) {
        {
          oprot.writeI32(struct.variants.size());
          for (String _iter228 : struct.variants)
          {
            oprot.writeString(_iter228);
          }
        }
      }
      if (struct.isSetNumentries()) {
        {
          oprot.writeI32(struct.numentries.size());
          for (int _iter229 : struct.numentries)
          {
            oprot.writeI32(_iter229);
          }
        }
      }
      if (struct.isSetSets()) {
        {
          oprot.writeI32(struct.sets.size());
          for (TPropertySet _iter230 : struct.sets)
          {
            _iter230.write(oprot);
          }
        }
      }
      if (struct.isSetKeys()) {
        {
          oprot.writeI32(struct.keys.size());
          for (TPropertyKey _iter231 : struct.keys)
          {
            _iter231.write(oprot);
          }
        }
      }
      if (struct.isSetColumns()) {
        {
          oprot.writeI32(struct.columns.size());
          for (TColumn _iter232 : struct.columns)
          {
            _iter232.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TEdges struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.builtin = se.lth.cs.docforia.io.thrift.TEdgeTypes.findByValue(iprot.readI32());
        struct.setBuiltinIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list233 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.variants = new ArrayList<String>(_list233.size);
          String _elem234;
          for (int _i235 = 0; _i235 < _list233.size; ++_i235)
          {
            _elem234 = iprot.readString();
            struct.variants.add(_elem234);
          }
        }
        struct.setVariantsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list236 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.numentries = new ArrayList<Integer>(_list236.size);
          int _elem237;
          for (int _i238 = 0; _i238 < _list236.size; ++_i238)
          {
            _elem237 = iprot.readI32();
            struct.numentries.add(_elem237);
          }
        }
        struct.setNumentriesIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list239 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.sets = new ArrayList<TPropertySet>(_list239.size);
          TPropertySet _elem240;
          for (int _i241 = 0; _i241 < _list239.size; ++_i241)
          {
            _elem240 = new TPropertySet();
            _elem240.read(iprot);
            struct.sets.add(_elem240);
          }
        }
        struct.setSetsIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list242 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.keys = new ArrayList<TPropertyKey>(_list242.size);
          TPropertyKey _elem243;
          for (int _i244 = 0; _i244 < _list242.size; ++_i244)
          {
            _elem243 = new TPropertyKey();
            _elem243.read(iprot);
            struct.keys.add(_elem243);
          }
        }
        struct.setKeysIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list245 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.columns = new ArrayList<TColumn>(_list245.size);
          TColumn _elem246;
          for (int _i247 = 0; _i247 < _list245.size; ++_i247)
          {
            _elem246 = new TColumn();
            _elem246.read(iprot);
            struct.columns.add(_elem246);
          }
        }
        struct.setColumnsIsSet(true);
      }
    }
  }

}


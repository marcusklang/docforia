/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package se.lth.cs.docforia.io.thrift;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-11-03")
public class TPropertyKey implements org.apache.thrift.TBase<TPropertyKey, TPropertyKey._Fields>, java.io.Serializable, Cloneable, Comparable<TPropertyKey> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPropertyKey");

  private static final org.apache.thrift.protocol.TField SPECIAL_FIELD_DESC = new org.apache.thrift.protocol.TField("special", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LAYERID_FIELD_DESC = new org.apache.thrift.protocol.TField("layerid", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPropertyKeyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPropertyKeyTupleSchemeFactory());
  }

  /**
   * 
   * @see TSpecialKey
   */
  public TSpecialKey special; // optional
  public String name; // optional
  /**
   * 
   * @see TDataType
   */
  public TDataType type; // optional
  public int layerid; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TSpecialKey
     */
    SPECIAL((short)1, "special"),
    NAME((short)2, "name"),
    /**
     * 
     * @see TDataType
     */
    TYPE((short)3, "type"),
    LAYERID((short)4, "layerid");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SPECIAL
          return SPECIAL;
        case 2: // NAME
          return NAME;
        case 3: // TYPE
          return TYPE;
        case 4: // LAYERID
          return LAYERID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LAYERID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SPECIAL,_Fields.NAME,_Fields.TYPE,_Fields.LAYERID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SPECIAL, new org.apache.thrift.meta_data.FieldMetaData("special", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TSpecialKey.class)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TDataType.class)));
    tmpMap.put(_Fields.LAYERID, new org.apache.thrift.meta_data.FieldMetaData("layerid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPropertyKey.class, metaDataMap);
  }

  public TPropertyKey() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPropertyKey(TPropertyKey other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSpecial()) {
      this.special = other.special;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.layerid = other.layerid;
  }

  public TPropertyKey deepCopy() {
    return new TPropertyKey(this);
  }

  @Override
  public void clear() {
    this.special = null;
    this.name = null;
    this.type = null;
    setLayeridIsSet(false);
    this.layerid = 0;
  }

  /**
   * 
   * @see TSpecialKey
   */
  public TSpecialKey getSpecial() {
    return this.special;
  }

  /**
   * 
   * @see TSpecialKey
   */
  public TPropertyKey setSpecial(TSpecialKey special) {
    this.special = special;
    return this;
  }

  public void unsetSpecial() {
    this.special = null;
  }

  /** Returns true if field special is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecial() {
    return this.special != null;
  }

  public void setSpecialIsSet(boolean value) {
    if (!value) {
      this.special = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public TPropertyKey setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * 
   * @see TDataType
   */
  public TDataType getType() {
    return this.type;
  }

  /**
   * 
   * @see TDataType
   */
  public TPropertyKey setType(TDataType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getLayerid() {
    return this.layerid;
  }

  public TPropertyKey setLayerid(int layerid) {
    this.layerid = layerid;
    setLayeridIsSet(true);
    return this;
  }

  public void unsetLayerid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LAYERID_ISSET_ID);
  }

  /** Returns true if field layerid is set (has been assigned a value) and false otherwise */
  public boolean isSetLayerid() {
    return EncodingUtils.testBit(__isset_bitfield, __LAYERID_ISSET_ID);
  }

  public void setLayeridIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LAYERID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SPECIAL:
      if (value == null) {
        unsetSpecial();
      } else {
        setSpecial((TSpecialKey)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((TDataType)value);
      }
      break;

    case LAYERID:
      if (value == null) {
        unsetLayerid();
      } else {
        setLayerid((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SPECIAL:
      return getSpecial();

    case NAME:
      return getName();

    case TYPE:
      return getType();

    case LAYERID:
      return getLayerid();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SPECIAL:
      return isSetSpecial();
    case NAME:
      return isSetName();
    case TYPE:
      return isSetType();
    case LAYERID:
      return isSetLayerid();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPropertyKey)
      return this.equals((TPropertyKey)that);
    return false;
  }

  public boolean equals(TPropertyKey that) {
    if (that == null)
      return false;

    boolean this_present_special = true && this.isSetSpecial();
    boolean that_present_special = true && that.isSetSpecial();
    if (this_present_special || that_present_special) {
      if (!(this_present_special && that_present_special))
        return false;
      if (!this.special.equals(that.special))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_layerid = true && this.isSetLayerid();
    boolean that_present_layerid = true && that.isSetLayerid();
    if (this_present_layerid || that_present_layerid) {
      if (!(this_present_layerid && that_present_layerid))
        return false;
      if (this.layerid != that.layerid)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_special = true && (isSetSpecial());
    list.add(present_special);
    if (present_special)
      list.add(special.getValue());

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_type = true && (isSetType());
    list.add(present_type);
    if (present_type)
      list.add(type.getValue());

    boolean present_layerid = true && (isSetLayerid());
    list.add(present_layerid);
    if (present_layerid)
      list.add(layerid);

    return list.hashCode();
  }

  @Override
  public int compareTo(TPropertyKey other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSpecial()).compareTo(other.isSetSpecial());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecial()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.special, other.special);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLayerid()).compareTo(other.isSetLayerid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLayerid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.layerid, other.layerid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPropertyKey(");
    boolean first = true;

    if (isSetSpecial()) {
      sb.append("special:");
      if (this.special == null) {
        sb.append("null");
      } else {
        sb.append(this.special);
      }
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetLayerid()) {
      if (!first) sb.append(", ");
      sb.append("layerid:");
      sb.append(this.layerid);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPropertyKeyStandardSchemeFactory implements SchemeFactory {
    public TPropertyKeyStandardScheme getScheme() {
      return new TPropertyKeyStandardScheme();
    }
  }

  private static class TPropertyKeyStandardScheme extends StandardScheme<TPropertyKey> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPropertyKey struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SPECIAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.special = se.lth.cs.docforia.io.thrift.TSpecialKey.findByValue(iprot.readI32());
              struct.setSpecialIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = se.lth.cs.docforia.io.thrift.TDataType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LAYERID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.layerid = iprot.readI32();
              struct.setLayeridIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPropertyKey struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.special != null) {
        if (struct.isSetSpecial()) {
          oprot.writeFieldBegin(SPECIAL_FIELD_DESC);
          oprot.writeI32(struct.special.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLayerid()) {
        oprot.writeFieldBegin(LAYERID_FIELD_DESC);
        oprot.writeI32(struct.layerid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPropertyKeyTupleSchemeFactory implements SchemeFactory {
    public TPropertyKeyTupleScheme getScheme() {
      return new TPropertyKeyTupleScheme();
    }
  }

  private static class TPropertyKeyTupleScheme extends TupleScheme<TPropertyKey> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPropertyKey struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSpecial()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetType()) {
        optionals.set(2);
      }
      if (struct.isSetLayerid()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetSpecial()) {
        oprot.writeI32(struct.special.getValue());
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetLayerid()) {
        oprot.writeI32(struct.layerid);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPropertyKey struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.special = se.lth.cs.docforia.io.thrift.TSpecialKey.findByValue(iprot.readI32());
        struct.setSpecialIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.type = se.lth.cs.docforia.io.thrift.TDataType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.layerid = iprot.readI32();
        struct.setLayeridIsSet(true);
      }
    }
  }

}


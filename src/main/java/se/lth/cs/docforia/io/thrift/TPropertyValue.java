/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package se.lth.cs.docforia.io.thrift;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.nio.ByteBuffer;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-11-03")
public class TPropertyValue implements org.apache.thrift.TBase<TPropertyValue, TPropertyValue._Fields>, java.io.Serializable, Cloneable, Comparable<TPropertyValue> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPropertyValue");

  private static final org.apache.thrift.protocol.TField BINARY_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("binaryValue", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField STRING_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("stringValues", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField BOOL_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("boolValues", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField INT_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("intValues", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField LONG_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("longValues", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField DOUBLE_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleValues", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField DOC_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("docValues", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField PROP_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("propValues", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField LENGTH_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("lengthInfo", org.apache.thrift.protocol.TType.LIST, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPropertyValueStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPropertyValueTupleSchemeFactory());
  }

  public List<ByteBuffer> binaryValue; // optional
  public List<String> stringValues; // optional
  public List<Boolean> boolValues; // optional
  public List<Integer> intValues; // optional
  public List<Long> longValues; // optional
  public List<Double> doubleValues; // optional
  public List<TDocument> docValues; // optional
  public List<TPropertyMap> propValues; // optional
  public List<Integer> lengthInfo; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BINARY_VALUE((short)1, "binaryValue"),
    STRING_VALUES((short)2, "stringValues"),
    BOOL_VALUES((short)3, "boolValues"),
    INT_VALUES((short)4, "intValues"),
    LONG_VALUES((short)5, "longValues"),
    DOUBLE_VALUES((short)7, "doubleValues"),
    DOC_VALUES((short)8, "docValues"),
    PROP_VALUES((short)9, "propValues"),
    LENGTH_INFO((short)10, "lengthInfo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BINARY_VALUE
          return BINARY_VALUE;
        case 2: // STRING_VALUES
          return STRING_VALUES;
        case 3: // BOOL_VALUES
          return BOOL_VALUES;
        case 4: // INT_VALUES
          return INT_VALUES;
        case 5: // LONG_VALUES
          return LONG_VALUES;
        case 7: // DOUBLE_VALUES
          return DOUBLE_VALUES;
        case 8: // DOC_VALUES
          return DOC_VALUES;
        case 9: // PROP_VALUES
          return PROP_VALUES;
        case 10: // LENGTH_INFO
          return LENGTH_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.BINARY_VALUE,_Fields.STRING_VALUES,_Fields.BOOL_VALUES,_Fields.INT_VALUES,_Fields.LONG_VALUES,_Fields.DOUBLE_VALUES,_Fields.DOC_VALUES,_Fields.PROP_VALUES,_Fields.LENGTH_INFO};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BINARY_VALUE, new org.apache.thrift.meta_data.FieldMetaData("binaryValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.STRING_VALUES, new org.apache.thrift.meta_data.FieldMetaData("stringValues", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.BOOL_VALUES, new org.apache.thrift.meta_data.FieldMetaData("boolValues", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
    tmpMap.put(_Fields.INT_VALUES, new org.apache.thrift.meta_data.FieldMetaData("intValues", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.LONG_VALUES, new org.apache.thrift.meta_data.FieldMetaData("longValues", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.DOUBLE_VALUES, new org.apache.thrift.meta_data.FieldMetaData("doubleValues", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.DOC_VALUES, new org.apache.thrift.meta_data.FieldMetaData("docValues", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "TDocument"))));
    tmpMap.put(_Fields.PROP_VALUES, new org.apache.thrift.meta_data.FieldMetaData("propValues", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "TPropertyMap"))));
    tmpMap.put(_Fields.LENGTH_INFO, new org.apache.thrift.meta_data.FieldMetaData("lengthInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPropertyValue.class, metaDataMap);
  }

  public TPropertyValue() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPropertyValue(TPropertyValue other) {
    if (other.isSetBinaryValue()) {
      List<ByteBuffer> __this__binaryValue = new ArrayList<ByteBuffer>(other.binaryValue);
      this.binaryValue = __this__binaryValue;
    }
    if (other.isSetStringValues()) {
      List<String> __this__stringValues = new ArrayList<String>(other.stringValues);
      this.stringValues = __this__stringValues;
    }
    if (other.isSetBoolValues()) {
      List<Boolean> __this__boolValues = new ArrayList<Boolean>(other.boolValues);
      this.boolValues = __this__boolValues;
    }
    if (other.isSetIntValues()) {
      List<Integer> __this__intValues = new ArrayList<Integer>(other.intValues);
      this.intValues = __this__intValues;
    }
    if (other.isSetLongValues()) {
      List<Long> __this__longValues = new ArrayList<Long>(other.longValues);
      this.longValues = __this__longValues;
    }
    if (other.isSetDoubleValues()) {
      List<Double> __this__doubleValues = new ArrayList<Double>(other.doubleValues);
      this.doubleValues = __this__doubleValues;
    }
    if (other.isSetDocValues()) {
      List<TDocument> __this__docValues = new ArrayList<TDocument>(other.docValues.size());
      for (TDocument other_element : other.docValues) {
        __this__docValues.add(other_element);
      }
      this.docValues = __this__docValues;
    }
    if (other.isSetPropValues()) {
      List<TPropertyMap> __this__propValues = new ArrayList<TPropertyMap>(other.propValues.size());
      for (TPropertyMap other_element : other.propValues) {
        __this__propValues.add(other_element);
      }
      this.propValues = __this__propValues;
    }
    if (other.isSetLengthInfo()) {
      List<Integer> __this__lengthInfo = new ArrayList<Integer>(other.lengthInfo);
      this.lengthInfo = __this__lengthInfo;
    }
  }

  public TPropertyValue deepCopy() {
    return new TPropertyValue(this);
  }

  @Override
  public void clear() {
    this.binaryValue = null;
    this.stringValues = null;
    this.boolValues = null;
    this.intValues = null;
    this.longValues = null;
    this.doubleValues = null;
    this.docValues = null;
    this.propValues = null;
    this.lengthInfo = null;
  }

  public int getBinaryValueSize() {
    return (this.binaryValue == null) ? 0 : this.binaryValue.size();
  }

  public java.util.Iterator<ByteBuffer> getBinaryValueIterator() {
    return (this.binaryValue == null) ? null : this.binaryValue.iterator();
  }

  public void addToBinaryValue(ByteBuffer elem) {
    if (this.binaryValue == null) {
      this.binaryValue = new ArrayList<ByteBuffer>();
    }
    this.binaryValue.add(elem);
  }

  public List<ByteBuffer> getBinaryValue() {
    return this.binaryValue;
  }

  public TPropertyValue setBinaryValue(List<ByteBuffer> binaryValue) {
    this.binaryValue = binaryValue;
    return this;
  }

  public void unsetBinaryValue() {
    this.binaryValue = null;
  }

  /** Returns true if field binaryValue is set (has been assigned a value) and false otherwise */
  public boolean isSetBinaryValue() {
    return this.binaryValue != null;
  }

  public void setBinaryValueIsSet(boolean value) {
    if (!value) {
      this.binaryValue = null;
    }
  }

  public int getStringValuesSize() {
    return (this.stringValues == null) ? 0 : this.stringValues.size();
  }

  public java.util.Iterator<String> getStringValuesIterator() {
    return (this.stringValues == null) ? null : this.stringValues.iterator();
  }

  public void addToStringValues(String elem) {
    if (this.stringValues == null) {
      this.stringValues = new ArrayList<String>();
    }
    this.stringValues.add(elem);
  }

  public List<String> getStringValues() {
    return this.stringValues;
  }

  public TPropertyValue setStringValues(List<String> stringValues) {
    this.stringValues = stringValues;
    return this;
  }

  public void unsetStringValues() {
    this.stringValues = null;
  }

  /** Returns true if field stringValues is set (has been assigned a value) and false otherwise */
  public boolean isSetStringValues() {
    return this.stringValues != null;
  }

  public void setStringValuesIsSet(boolean value) {
    if (!value) {
      this.stringValues = null;
    }
  }

  public int getBoolValuesSize() {
    return (this.boolValues == null) ? 0 : this.boolValues.size();
  }

  public java.util.Iterator<Boolean> getBoolValuesIterator() {
    return (this.boolValues == null) ? null : this.boolValues.iterator();
  }

  public void addToBoolValues(boolean elem) {
    if (this.boolValues == null) {
      this.boolValues = new ArrayList<Boolean>();
    }
    this.boolValues.add(elem);
  }

  public List<Boolean> getBoolValues() {
    return this.boolValues;
  }

  public TPropertyValue setBoolValues(List<Boolean> boolValues) {
    this.boolValues = boolValues;
    return this;
  }

  public void unsetBoolValues() {
    this.boolValues = null;
  }

  /** Returns true if field boolValues is set (has been assigned a value) and false otherwise */
  public boolean isSetBoolValues() {
    return this.boolValues != null;
  }

  public void setBoolValuesIsSet(boolean value) {
    if (!value) {
      this.boolValues = null;
    }
  }

  public int getIntValuesSize() {
    return (this.intValues == null) ? 0 : this.intValues.size();
  }

  public java.util.Iterator<Integer> getIntValuesIterator() {
    return (this.intValues == null) ? null : this.intValues.iterator();
  }

  public void addToIntValues(int elem) {
    if (this.intValues == null) {
      this.intValues = new ArrayList<Integer>();
    }
    this.intValues.add(elem);
  }

  public List<Integer> getIntValues() {
    return this.intValues;
  }

  public TPropertyValue setIntValues(List<Integer> intValues) {
    this.intValues = intValues;
    return this;
  }

  public void unsetIntValues() {
    this.intValues = null;
  }

  /** Returns true if field intValues is set (has been assigned a value) and false otherwise */
  public boolean isSetIntValues() {
    return this.intValues != null;
  }

  public void setIntValuesIsSet(boolean value) {
    if (!value) {
      this.intValues = null;
    }
  }

  public int getLongValuesSize() {
    return (this.longValues == null) ? 0 : this.longValues.size();
  }

  public java.util.Iterator<Long> getLongValuesIterator() {
    return (this.longValues == null) ? null : this.longValues.iterator();
  }

  public void addToLongValues(long elem) {
    if (this.longValues == null) {
      this.longValues = new ArrayList<Long>();
    }
    this.longValues.add(elem);
  }

  public List<Long> getLongValues() {
    return this.longValues;
  }

  public TPropertyValue setLongValues(List<Long> longValues) {
    this.longValues = longValues;
    return this;
  }

  public void unsetLongValues() {
    this.longValues = null;
  }

  /** Returns true if field longValues is set (has been assigned a value) and false otherwise */
  public boolean isSetLongValues() {
    return this.longValues != null;
  }

  public void setLongValuesIsSet(boolean value) {
    if (!value) {
      this.longValues = null;
    }
  }

  public int getDoubleValuesSize() {
    return (this.doubleValues == null) ? 0 : this.doubleValues.size();
  }

  public java.util.Iterator<Double> getDoubleValuesIterator() {
    return (this.doubleValues == null) ? null : this.doubleValues.iterator();
  }

  public void addToDoubleValues(double elem) {
    if (this.doubleValues == null) {
      this.doubleValues = new ArrayList<Double>();
    }
    this.doubleValues.add(elem);
  }

  public List<Double> getDoubleValues() {
    return this.doubleValues;
  }

  public TPropertyValue setDoubleValues(List<Double> doubleValues) {
    this.doubleValues = doubleValues;
    return this;
  }

  public void unsetDoubleValues() {
    this.doubleValues = null;
  }

  /** Returns true if field doubleValues is set (has been assigned a value) and false otherwise */
  public boolean isSetDoubleValues() {
    return this.doubleValues != null;
  }

  public void setDoubleValuesIsSet(boolean value) {
    if (!value) {
      this.doubleValues = null;
    }
  }

  public int getDocValuesSize() {
    return (this.docValues == null) ? 0 : this.docValues.size();
  }

  public java.util.Iterator<TDocument> getDocValuesIterator() {
    return (this.docValues == null) ? null : this.docValues.iterator();
  }

  public void addToDocValues(TDocument elem) {
    if (this.docValues == null) {
      this.docValues = new ArrayList<TDocument>();
    }
    this.docValues.add(elem);
  }

  public List<TDocument> getDocValues() {
    return this.docValues;
  }

  public TPropertyValue setDocValues(List<TDocument> docValues) {
    this.docValues = docValues;
    return this;
  }

  public void unsetDocValues() {
    this.docValues = null;
  }

  /** Returns true if field docValues is set (has been assigned a value) and false otherwise */
  public boolean isSetDocValues() {
    return this.docValues != null;
  }

  public void setDocValuesIsSet(boolean value) {
    if (!value) {
      this.docValues = null;
    }
  }

  public int getPropValuesSize() {
    return (this.propValues == null) ? 0 : this.propValues.size();
  }

  public java.util.Iterator<TPropertyMap> getPropValuesIterator() {
    return (this.propValues == null) ? null : this.propValues.iterator();
  }

  public void addToPropValues(TPropertyMap elem) {
    if (this.propValues == null) {
      this.propValues = new ArrayList<TPropertyMap>();
    }
    this.propValues.add(elem);
  }

  public List<TPropertyMap> getPropValues() {
    return this.propValues;
  }

  public TPropertyValue setPropValues(List<TPropertyMap> propValues) {
    this.propValues = propValues;
    return this;
  }

  public void unsetPropValues() {
    this.propValues = null;
  }

  /** Returns true if field propValues is set (has been assigned a value) and false otherwise */
  public boolean isSetPropValues() {
    return this.propValues != null;
  }

  public void setPropValuesIsSet(boolean value) {
    if (!value) {
      this.propValues = null;
    }
  }

  public int getLengthInfoSize() {
    return (this.lengthInfo == null) ? 0 : this.lengthInfo.size();
  }

  public java.util.Iterator<Integer> getLengthInfoIterator() {
    return (this.lengthInfo == null) ? null : this.lengthInfo.iterator();
  }

  public void addToLengthInfo(int elem) {
    if (this.lengthInfo == null) {
      this.lengthInfo = new ArrayList<Integer>();
    }
    this.lengthInfo.add(elem);
  }

  public List<Integer> getLengthInfo() {
    return this.lengthInfo;
  }

  public TPropertyValue setLengthInfo(List<Integer> lengthInfo) {
    this.lengthInfo = lengthInfo;
    return this;
  }

  public void unsetLengthInfo() {
    this.lengthInfo = null;
  }

  /** Returns true if field lengthInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetLengthInfo() {
    return this.lengthInfo != null;
  }

  public void setLengthInfoIsSet(boolean value) {
    if (!value) {
      this.lengthInfo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BINARY_VALUE:
      if (value == null) {
        unsetBinaryValue();
      } else {
        setBinaryValue((List<ByteBuffer>)value);
      }
      break;

    case STRING_VALUES:
      if (value == null) {
        unsetStringValues();
      } else {
        setStringValues((List<String>)value);
      }
      break;

    case BOOL_VALUES:
      if (value == null) {
        unsetBoolValues();
      } else {
        setBoolValues((List<Boolean>)value);
      }
      break;

    case INT_VALUES:
      if (value == null) {
        unsetIntValues();
      } else {
        setIntValues((List<Integer>)value);
      }
      break;

    case LONG_VALUES:
      if (value == null) {
        unsetLongValues();
      } else {
        setLongValues((List<Long>)value);
      }
      break;

    case DOUBLE_VALUES:
      if (value == null) {
        unsetDoubleValues();
      } else {
        setDoubleValues((List<Double>)value);
      }
      break;

    case DOC_VALUES:
      if (value == null) {
        unsetDocValues();
      } else {
        setDocValues((List<TDocument>)value);
      }
      break;

    case PROP_VALUES:
      if (value == null) {
        unsetPropValues();
      } else {
        setPropValues((List<TPropertyMap>)value);
      }
      break;

    case LENGTH_INFO:
      if (value == null) {
        unsetLengthInfo();
      } else {
        setLengthInfo((List<Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BINARY_VALUE:
      return getBinaryValue();

    case STRING_VALUES:
      return getStringValues();

    case BOOL_VALUES:
      return getBoolValues();

    case INT_VALUES:
      return getIntValues();

    case LONG_VALUES:
      return getLongValues();

    case DOUBLE_VALUES:
      return getDoubleValues();

    case DOC_VALUES:
      return getDocValues();

    case PROP_VALUES:
      return getPropValues();

    case LENGTH_INFO:
      return getLengthInfo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BINARY_VALUE:
      return isSetBinaryValue();
    case STRING_VALUES:
      return isSetStringValues();
    case BOOL_VALUES:
      return isSetBoolValues();
    case INT_VALUES:
      return isSetIntValues();
    case LONG_VALUES:
      return isSetLongValues();
    case DOUBLE_VALUES:
      return isSetDoubleValues();
    case DOC_VALUES:
      return isSetDocValues();
    case PROP_VALUES:
      return isSetPropValues();
    case LENGTH_INFO:
      return isSetLengthInfo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPropertyValue)
      return this.equals((TPropertyValue)that);
    return false;
  }

  public boolean equals(TPropertyValue that) {
    if (that == null)
      return false;

    boolean this_present_binaryValue = true && this.isSetBinaryValue();
    boolean that_present_binaryValue = true && that.isSetBinaryValue();
    if (this_present_binaryValue || that_present_binaryValue) {
      if (!(this_present_binaryValue && that_present_binaryValue))
        return false;
      if (!this.binaryValue.equals(that.binaryValue))
        return false;
    }

    boolean this_present_stringValues = true && this.isSetStringValues();
    boolean that_present_stringValues = true && that.isSetStringValues();
    if (this_present_stringValues || that_present_stringValues) {
      if (!(this_present_stringValues && that_present_stringValues))
        return false;
      if (!this.stringValues.equals(that.stringValues))
        return false;
    }

    boolean this_present_boolValues = true && this.isSetBoolValues();
    boolean that_present_boolValues = true && that.isSetBoolValues();
    if (this_present_boolValues || that_present_boolValues) {
      if (!(this_present_boolValues && that_present_boolValues))
        return false;
      if (!this.boolValues.equals(that.boolValues))
        return false;
    }

    boolean this_present_intValues = true && this.isSetIntValues();
    boolean that_present_intValues = true && that.isSetIntValues();
    if (this_present_intValues || that_present_intValues) {
      if (!(this_present_intValues && that_present_intValues))
        return false;
      if (!this.intValues.equals(that.intValues))
        return false;
    }

    boolean this_present_longValues = true && this.isSetLongValues();
    boolean that_present_longValues = true && that.isSetLongValues();
    if (this_present_longValues || that_present_longValues) {
      if (!(this_present_longValues && that_present_longValues))
        return false;
      if (!this.longValues.equals(that.longValues))
        return false;
    }

    boolean this_present_doubleValues = true && this.isSetDoubleValues();
    boolean that_present_doubleValues = true && that.isSetDoubleValues();
    if (this_present_doubleValues || that_present_doubleValues) {
      if (!(this_present_doubleValues && that_present_doubleValues))
        return false;
      if (!this.doubleValues.equals(that.doubleValues))
        return false;
    }

    boolean this_present_docValues = true && this.isSetDocValues();
    boolean that_present_docValues = true && that.isSetDocValues();
    if (this_present_docValues || that_present_docValues) {
      if (!(this_present_docValues && that_present_docValues))
        return false;
      if (!this.docValues.equals(that.docValues))
        return false;
    }

    boolean this_present_propValues = true && this.isSetPropValues();
    boolean that_present_propValues = true && that.isSetPropValues();
    if (this_present_propValues || that_present_propValues) {
      if (!(this_present_propValues && that_present_propValues))
        return false;
      if (!this.propValues.equals(that.propValues))
        return false;
    }

    boolean this_present_lengthInfo = true && this.isSetLengthInfo();
    boolean that_present_lengthInfo = true && that.isSetLengthInfo();
    if (this_present_lengthInfo || that_present_lengthInfo) {
      if (!(this_present_lengthInfo && that_present_lengthInfo))
        return false;
      if (!this.lengthInfo.equals(that.lengthInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_binaryValue = true && (isSetBinaryValue());
    list.add(present_binaryValue);
    if (present_binaryValue)
      list.add(binaryValue);

    boolean present_stringValues = true && (isSetStringValues());
    list.add(present_stringValues);
    if (present_stringValues)
      list.add(stringValues);

    boolean present_boolValues = true && (isSetBoolValues());
    list.add(present_boolValues);
    if (present_boolValues)
      list.add(boolValues);

    boolean present_intValues = true && (isSetIntValues());
    list.add(present_intValues);
    if (present_intValues)
      list.add(intValues);

    boolean present_longValues = true && (isSetLongValues());
    list.add(present_longValues);
    if (present_longValues)
      list.add(longValues);

    boolean present_doubleValues = true && (isSetDoubleValues());
    list.add(present_doubleValues);
    if (present_doubleValues)
      list.add(doubleValues);

    boolean present_docValues = true && (isSetDocValues());
    list.add(present_docValues);
    if (present_docValues)
      list.add(docValues);

    boolean present_propValues = true && (isSetPropValues());
    list.add(present_propValues);
    if (present_propValues)
      list.add(propValues);

    boolean present_lengthInfo = true && (isSetLengthInfo());
    list.add(present_lengthInfo);
    if (present_lengthInfo)
      list.add(lengthInfo);

    return list.hashCode();
  }

  @Override
  public int compareTo(TPropertyValue other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBinaryValue()).compareTo(other.isSetBinaryValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinaryValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binaryValue, other.binaryValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStringValues()).compareTo(other.isSetStringValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStringValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringValues, other.stringValues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBoolValues()).compareTo(other.isSetBoolValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoolValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boolValues, other.boolValues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntValues()).compareTo(other.isSetIntValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intValues, other.intValues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongValues()).compareTo(other.isSetLongValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longValues, other.longValues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoubleValues()).compareTo(other.isSetDoubleValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoubleValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doubleValues, other.doubleValues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDocValues()).compareTo(other.isSetDocValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.docValues, other.docValues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPropValues()).compareTo(other.isSetPropValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPropValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propValues, other.propValues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLengthInfo()).compareTo(other.isSetLengthInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLengthInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lengthInfo, other.lengthInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPropertyValue(");
    boolean first = true;

    if (isSetBinaryValue()) {
      sb.append("binaryValue:");
      if (this.binaryValue == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.binaryValue, sb);
      }
      first = false;
    }
    if (isSetStringValues()) {
      if (!first) sb.append(", ");
      sb.append("stringValues:");
      if (this.stringValues == null) {
        sb.append("null");
      } else {
        sb.append(this.stringValues);
      }
      first = false;
    }
    if (isSetBoolValues()) {
      if (!first) sb.append(", ");
      sb.append("boolValues:");
      if (this.boolValues == null) {
        sb.append("null");
      } else {
        sb.append(this.boolValues);
      }
      first = false;
    }
    if (isSetIntValues()) {
      if (!first) sb.append(", ");
      sb.append("intValues:");
      if (this.intValues == null) {
        sb.append("null");
      } else {
        sb.append(this.intValues);
      }
      first = false;
    }
    if (isSetLongValues()) {
      if (!first) sb.append(", ");
      sb.append("longValues:");
      if (this.longValues == null) {
        sb.append("null");
      } else {
        sb.append(this.longValues);
      }
      first = false;
    }
    if (isSetDoubleValues()) {
      if (!first) sb.append(", ");
      sb.append("doubleValues:");
      if (this.doubleValues == null) {
        sb.append("null");
      } else {
        sb.append(this.doubleValues);
      }
      first = false;
    }
    if (isSetDocValues()) {
      if (!first) sb.append(", ");
      sb.append("docValues:");
      if (this.docValues == null) {
        sb.append("null");
      } else {
        sb.append(this.docValues);
      }
      first = false;
    }
    if (isSetPropValues()) {
      if (!first) sb.append(", ");
      sb.append("propValues:");
      if (this.propValues == null) {
        sb.append("null");
      } else {
        sb.append(this.propValues);
      }
      first = false;
    }
    if (isSetLengthInfo()) {
      if (!first) sb.append(", ");
      sb.append("lengthInfo:");
      if (this.lengthInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.lengthInfo);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPropertyValueStandardSchemeFactory implements SchemeFactory {
    public TPropertyValueStandardScheme getScheme() {
      return new TPropertyValueStandardScheme();
    }
  }

  private static class TPropertyValueStandardScheme extends StandardScheme<TPropertyValue> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPropertyValue struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BINARY_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.binaryValue = new ArrayList<ByteBuffer>(_list8.size);
                ByteBuffer _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = iprot.readBinary();
                  struct.binaryValue.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setBinaryValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STRING_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                struct.stringValues = new ArrayList<String>(_list11.size);
                String _elem12;
                for (int _i13 = 0; _i13 < _list11.size; ++_i13)
                {
                  _elem12 = iprot.readString();
                  struct.stringValues.add(_elem12);
                }
                iprot.readListEnd();
              }
              struct.setStringValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BOOL_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list14 = iprot.readListBegin();
                struct.boolValues = new ArrayList<Boolean>(_list14.size);
                boolean _elem15;
                for (int _i16 = 0; _i16 < _list14.size; ++_i16)
                {
                  _elem15 = iprot.readBool();
                  struct.boolValues.add(_elem15);
                }
                iprot.readListEnd();
              }
              struct.setBoolValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INT_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list17 = iprot.readListBegin();
                struct.intValues = new ArrayList<Integer>(_list17.size);
                int _elem18;
                for (int _i19 = 0; _i19 < _list17.size; ++_i19)
                {
                  _elem18 = iprot.readI32();
                  struct.intValues.add(_elem18);
                }
                iprot.readListEnd();
              }
              struct.setIntValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LONG_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list20 = iprot.readListBegin();
                struct.longValues = new ArrayList<Long>(_list20.size);
                long _elem21;
                for (int _i22 = 0; _i22 < _list20.size; ++_i22)
                {
                  _elem21 = iprot.readI64();
                  struct.longValues.add(_elem21);
                }
                iprot.readListEnd();
              }
              struct.setLongValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DOUBLE_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list23 = iprot.readListBegin();
                struct.doubleValues = new ArrayList<Double>(_list23.size);
                double _elem24;
                for (int _i25 = 0; _i25 < _list23.size; ++_i25)
                {
                  _elem24 = iprot.readDouble();
                  struct.doubleValues.add(_elem24);
                }
                iprot.readListEnd();
              }
              struct.setDoubleValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DOC_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                struct.docValues = new ArrayList<TDocument>(_list26.size);
                TDocument _elem27;
                for (int _i28 = 0; _i28 < _list26.size; ++_i28)
                {
                  _elem27 = new TDocument();
                  _elem27.read(iprot);
                  struct.docValues.add(_elem27);
                }
                iprot.readListEnd();
              }
              struct.setDocValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PROP_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list29 = iprot.readListBegin();
                struct.propValues = new ArrayList<TPropertyMap>(_list29.size);
                TPropertyMap _elem30;
                for (int _i31 = 0; _i31 < _list29.size; ++_i31)
                {
                  _elem30 = new TPropertyMap();
                  _elem30.read(iprot);
                  struct.propValues.add(_elem30);
                }
                iprot.readListEnd();
              }
              struct.setPropValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LENGTH_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.lengthInfo = new ArrayList<Integer>(_list32.size);
                int _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  _elem33 = iprot.readI32();
                  struct.lengthInfo.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setLengthInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPropertyValue struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.binaryValue != null) {
        if (struct.isSetBinaryValue()) {
          oprot.writeFieldBegin(BINARY_VALUE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.binaryValue.size()));
            for (ByteBuffer _iter35 : struct.binaryValue)
            {
              oprot.writeBinary(_iter35);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.stringValues != null) {
        if (struct.isSetStringValues()) {
          oprot.writeFieldBegin(STRING_VALUES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.stringValues.size()));
            for (String _iter36 : struct.stringValues)
            {
              oprot.writeString(_iter36);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.boolValues != null) {
        if (struct.isSetBoolValues()) {
          oprot.writeFieldBegin(BOOL_VALUES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.boolValues.size()));
            for (boolean _iter37 : struct.boolValues)
            {
              oprot.writeBool(_iter37);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.intValues != null) {
        if (struct.isSetIntValues()) {
          oprot.writeFieldBegin(INT_VALUES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.intValues.size()));
            for (int _iter38 : struct.intValues)
            {
              oprot.writeI32(_iter38);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.longValues != null) {
        if (struct.isSetLongValues()) {
          oprot.writeFieldBegin(LONG_VALUES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.longValues.size()));
            for (long _iter39 : struct.longValues)
            {
              oprot.writeI64(_iter39);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.doubleValues != null) {
        if (struct.isSetDoubleValues()) {
          oprot.writeFieldBegin(DOUBLE_VALUES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.doubleValues.size()));
            for (double _iter40 : struct.doubleValues)
            {
              oprot.writeDouble(_iter40);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.docValues != null) {
        if (struct.isSetDocValues()) {
          oprot.writeFieldBegin(DOC_VALUES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.docValues.size()));
            for (TDocument _iter41 : struct.docValues)
            {
              _iter41.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.propValues != null) {
        if (struct.isSetPropValues()) {
          oprot.writeFieldBegin(PROP_VALUES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.propValues.size()));
            for (TPropertyMap _iter42 : struct.propValues)
            {
              _iter42.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.lengthInfo != null) {
        if (struct.isSetLengthInfo()) {
          oprot.writeFieldBegin(LENGTH_INFO_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.lengthInfo.size()));
            for (int _iter43 : struct.lengthInfo)
            {
              oprot.writeI32(_iter43);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPropertyValueTupleSchemeFactory implements SchemeFactory {
    public TPropertyValueTupleScheme getScheme() {
      return new TPropertyValueTupleScheme();
    }
  }

  private static class TPropertyValueTupleScheme extends TupleScheme<TPropertyValue> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPropertyValue struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBinaryValue()) {
        optionals.set(0);
      }
      if (struct.isSetStringValues()) {
        optionals.set(1);
      }
      if (struct.isSetBoolValues()) {
        optionals.set(2);
      }
      if (struct.isSetIntValues()) {
        optionals.set(3);
      }
      if (struct.isSetLongValues()) {
        optionals.set(4);
      }
      if (struct.isSetDoubleValues()) {
        optionals.set(5);
      }
      if (struct.isSetDocValues()) {
        optionals.set(6);
      }
      if (struct.isSetPropValues()) {
        optionals.set(7);
      }
      if (struct.isSetLengthInfo()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetBinaryValue()) {
        {
          oprot.writeI32(struct.binaryValue.size());
          for (ByteBuffer _iter44 : struct.binaryValue)
          {
            oprot.writeBinary(_iter44);
          }
        }
      }
      if (struct.isSetStringValues()) {
        {
          oprot.writeI32(struct.stringValues.size());
          for (String _iter45 : struct.stringValues)
          {
            oprot.writeString(_iter45);
          }
        }
      }
      if (struct.isSetBoolValues()) {
        {
          oprot.writeI32(struct.boolValues.size());
          for (boolean _iter46 : struct.boolValues)
          {
            oprot.writeBool(_iter46);
          }
        }
      }
      if (struct.isSetIntValues()) {
        {
          oprot.writeI32(struct.intValues.size());
          for (int _iter47 : struct.intValues)
          {
            oprot.writeI32(_iter47);
          }
        }
      }
      if (struct.isSetLongValues()) {
        {
          oprot.writeI32(struct.longValues.size());
          for (long _iter48 : struct.longValues)
          {
            oprot.writeI64(_iter48);
          }
        }
      }
      if (struct.isSetDoubleValues()) {
        {
          oprot.writeI32(struct.doubleValues.size());
          for (double _iter49 : struct.doubleValues)
          {
            oprot.writeDouble(_iter49);
          }
        }
      }
      if (struct.isSetDocValues()) {
        {
          oprot.writeI32(struct.docValues.size());
          for (TDocument _iter50 : struct.docValues)
          {
            _iter50.write(oprot);
          }
        }
      }
      if (struct.isSetPropValues()) {
        {
          oprot.writeI32(struct.propValues.size());
          for (TPropertyMap _iter51 : struct.propValues)
          {
            _iter51.write(oprot);
          }
        }
      }
      if (struct.isSetLengthInfo()) {
        {
          oprot.writeI32(struct.lengthInfo.size());
          for (int _iter52 : struct.lengthInfo)
          {
            oprot.writeI32(_iter52);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPropertyValue struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.binaryValue = new ArrayList<ByteBuffer>(_list53.size);
          ByteBuffer _elem54;
          for (int _i55 = 0; _i55 < _list53.size; ++_i55)
          {
            _elem54 = iprot.readBinary();
            struct.binaryValue.add(_elem54);
          }
        }
        struct.setBinaryValueIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list56 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.stringValues = new ArrayList<String>(_list56.size);
          String _elem57;
          for (int _i58 = 0; _i58 < _list56.size; ++_i58)
          {
            _elem57 = iprot.readString();
            struct.stringValues.add(_elem57);
          }
        }
        struct.setStringValuesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list59 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
          struct.boolValues = new ArrayList<Boolean>(_list59.size);
          boolean _elem60;
          for (int _i61 = 0; _i61 < _list59.size; ++_i61)
          {
            _elem60 = iprot.readBool();
            struct.boolValues.add(_elem60);
          }
        }
        struct.setBoolValuesIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list62 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.intValues = new ArrayList<Integer>(_list62.size);
          int _elem63;
          for (int _i64 = 0; _i64 < _list62.size; ++_i64)
          {
            _elem63 = iprot.readI32();
            struct.intValues.add(_elem63);
          }
        }
        struct.setIntValuesIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list65 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.longValues = new ArrayList<Long>(_list65.size);
          long _elem66;
          for (int _i67 = 0; _i67 < _list65.size; ++_i67)
          {
            _elem66 = iprot.readI64();
            struct.longValues.add(_elem66);
          }
        }
        struct.setLongValuesIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list68 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.doubleValues = new ArrayList<Double>(_list68.size);
          double _elem69;
          for (int _i70 = 0; _i70 < _list68.size; ++_i70)
          {
            _elem69 = iprot.readDouble();
            struct.doubleValues.add(_elem69);
          }
        }
        struct.setDoubleValuesIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list71 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.docValues = new ArrayList<TDocument>(_list71.size);
          TDocument _elem72;
          for (int _i73 = 0; _i73 < _list71.size; ++_i73)
          {
            _elem72 = new TDocument();
            _elem72.read(iprot);
            struct.docValues.add(_elem72);
          }
        }
        struct.setDocValuesIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list74 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.propValues = new ArrayList<TPropertyMap>(_list74.size);
          TPropertyMap _elem75;
          for (int _i76 = 0; _i76 < _list74.size; ++_i76)
          {
            _elem75 = new TPropertyMap();
            _elem75.read(iprot);
            struct.propValues.add(_elem75);
          }
        }
        struct.setPropValuesIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.lengthInfo = new ArrayList<Integer>(_list77.size);
          int _elem78;
          for (int _i79 = 0; _i79 < _list77.size; ++_i79)
          {
            _elem78 = iprot.readI32();
            struct.lengthInfo.add(_elem78);
          }
        }
        struct.setLengthInfoIsSet(true);
      }
    }
  }

}


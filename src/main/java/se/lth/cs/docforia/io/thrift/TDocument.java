/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package se.lth.cs.docforia.io.thrift;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-11-03")
public class TDocument implements org.apache.thrift.TBase<TDocument, TDocument._Fields>, java.io.Serializable, Cloneable, Comparable<TDocument> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TDocument");

  private static final org.apache.thrift.protocol.TField PROPMAP_FIELD_DESC = new org.apache.thrift.protocol.TField("propmap", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField NODESTREAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("nodestreams", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField EDGESTREAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("edgestreams", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField NODES_FIELD_DESC = new org.apache.thrift.protocol.TField("nodes", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField EDGES_FIELD_DESC = new org.apache.thrift.protocol.TField("edges", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TDocumentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TDocumentTupleSchemeFactory());
  }

  public TPropertyMap propmap; // optional
  public List<TTypeStream> nodestreams; // required
  public List<TTypeStream> edgestreams; // required
  public List<TNodes> nodes; // required
  public List<TEdges> edges; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROPMAP((short)1, "propmap"),
    NODESTREAMS((short)2, "nodestreams"),
    EDGESTREAMS((short)3, "edgestreams"),
    NODES((short)4, "nodes"),
    EDGES((short)5, "edges");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROPMAP
          return PROPMAP;
        case 2: // NODESTREAMS
          return NODESTREAMS;
        case 3: // EDGESTREAMS
          return EDGESTREAMS;
        case 4: // NODES
          return NODES;
        case 5: // EDGES
          return EDGES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.PROPMAP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROPMAP, new org.apache.thrift.meta_data.FieldMetaData("propmap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPropertyMap.class)));
    tmpMap.put(_Fields.NODESTREAMS, new org.apache.thrift.meta_data.FieldMetaData("nodestreams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTypeStream.class))));
    tmpMap.put(_Fields.EDGESTREAMS, new org.apache.thrift.meta_data.FieldMetaData("edgestreams", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTypeStream.class))));
    tmpMap.put(_Fields.NODES, new org.apache.thrift.meta_data.FieldMetaData("nodes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TNodes.class))));
    tmpMap.put(_Fields.EDGES, new org.apache.thrift.meta_data.FieldMetaData("edges", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEdges.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TDocument.class, metaDataMap);
  }

  public TDocument() {
  }

  public TDocument(
    List<TTypeStream> nodestreams,
    List<TTypeStream> edgestreams,
    List<TNodes> nodes,
    List<TEdges> edges)
  {
    this();
    this.nodestreams = nodestreams;
    this.edgestreams = edgestreams;
    this.nodes = nodes;
    this.edges = edges;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TDocument(TDocument other) {
    if (other.isSetPropmap()) {
      this.propmap = new TPropertyMap(other.propmap);
    }
    if (other.isSetNodestreams()) {
      List<TTypeStream> __this__nodestreams = new ArrayList<TTypeStream>(other.nodestreams.size());
      for (TTypeStream other_element : other.nodestreams) {
        __this__nodestreams.add(new TTypeStream(other_element));
      }
      this.nodestreams = __this__nodestreams;
    }
    if (other.isSetEdgestreams()) {
      List<TTypeStream> __this__edgestreams = new ArrayList<TTypeStream>(other.edgestreams.size());
      for (TTypeStream other_element : other.edgestreams) {
        __this__edgestreams.add(new TTypeStream(other_element));
      }
      this.edgestreams = __this__edgestreams;
    }
    if (other.isSetNodes()) {
      List<TNodes> __this__nodes = new ArrayList<TNodes>(other.nodes.size());
      for (TNodes other_element : other.nodes) {
        __this__nodes.add(new TNodes(other_element));
      }
      this.nodes = __this__nodes;
    }
    if (other.isSetEdges()) {
      List<TEdges> __this__edges = new ArrayList<TEdges>(other.edges.size());
      for (TEdges other_element : other.edges) {
        __this__edges.add(new TEdges(other_element));
      }
      this.edges = __this__edges;
    }
  }

  public TDocument deepCopy() {
    return new TDocument(this);
  }

  @Override
  public void clear() {
    this.propmap = null;
    this.nodestreams = null;
    this.edgestreams = null;
    this.nodes = null;
    this.edges = null;
  }

  public TPropertyMap getPropmap() {
    return this.propmap;
  }

  public TDocument setPropmap(TPropertyMap propmap) {
    this.propmap = propmap;
    return this;
  }

  public void unsetPropmap() {
    this.propmap = null;
  }

  /** Returns true if field propmap is set (has been assigned a value) and false otherwise */
  public boolean isSetPropmap() {
    return this.propmap != null;
  }

  public void setPropmapIsSet(boolean value) {
    if (!value) {
      this.propmap = null;
    }
  }

  public int getNodestreamsSize() {
    return (this.nodestreams == null) ? 0 : this.nodestreams.size();
  }

  public java.util.Iterator<TTypeStream> getNodestreamsIterator() {
    return (this.nodestreams == null) ? null : this.nodestreams.iterator();
  }

  public void addToNodestreams(TTypeStream elem) {
    if (this.nodestreams == null) {
      this.nodestreams = new ArrayList<TTypeStream>();
    }
    this.nodestreams.add(elem);
  }

  public List<TTypeStream> getNodestreams() {
    return this.nodestreams;
  }

  public TDocument setNodestreams(List<TTypeStream> nodestreams) {
    this.nodestreams = nodestreams;
    return this;
  }

  public void unsetNodestreams() {
    this.nodestreams = null;
  }

  /** Returns true if field nodestreams is set (has been assigned a value) and false otherwise */
  public boolean isSetNodestreams() {
    return this.nodestreams != null;
  }

  public void setNodestreamsIsSet(boolean value) {
    if (!value) {
      this.nodestreams = null;
    }
  }

  public int getEdgestreamsSize() {
    return (this.edgestreams == null) ? 0 : this.edgestreams.size();
  }

  public java.util.Iterator<TTypeStream> getEdgestreamsIterator() {
    return (this.edgestreams == null) ? null : this.edgestreams.iterator();
  }

  public void addToEdgestreams(TTypeStream elem) {
    if (this.edgestreams == null) {
      this.edgestreams = new ArrayList<TTypeStream>();
    }
    this.edgestreams.add(elem);
  }

  public List<TTypeStream> getEdgestreams() {
    return this.edgestreams;
  }

  public TDocument setEdgestreams(List<TTypeStream> edgestreams) {
    this.edgestreams = edgestreams;
    return this;
  }

  public void unsetEdgestreams() {
    this.edgestreams = null;
  }

  /** Returns true if field edgestreams is set (has been assigned a value) and false otherwise */
  public boolean isSetEdgestreams() {
    return this.edgestreams != null;
  }

  public void setEdgestreamsIsSet(boolean value) {
    if (!value) {
      this.edgestreams = null;
    }
  }

  public int getNodesSize() {
    return (this.nodes == null) ? 0 : this.nodes.size();
  }

  public java.util.Iterator<TNodes> getNodesIterator() {
    return (this.nodes == null) ? null : this.nodes.iterator();
  }

  public void addToNodes(TNodes elem) {
    if (this.nodes == null) {
      this.nodes = new ArrayList<TNodes>();
    }
    this.nodes.add(elem);
  }

  public List<TNodes> getNodes() {
    return this.nodes;
  }

  public TDocument setNodes(List<TNodes> nodes) {
    this.nodes = nodes;
    return this;
  }

  public void unsetNodes() {
    this.nodes = null;
  }

  /** Returns true if field nodes is set (has been assigned a value) and false otherwise */
  public boolean isSetNodes() {
    return this.nodes != null;
  }

  public void setNodesIsSet(boolean value) {
    if (!value) {
      this.nodes = null;
    }
  }

  public int getEdgesSize() {
    return (this.edges == null) ? 0 : this.edges.size();
  }

  public java.util.Iterator<TEdges> getEdgesIterator() {
    return (this.edges == null) ? null : this.edges.iterator();
  }

  public void addToEdges(TEdges elem) {
    if (this.edges == null) {
      this.edges = new ArrayList<TEdges>();
    }
    this.edges.add(elem);
  }

  public List<TEdges> getEdges() {
    return this.edges;
  }

  public TDocument setEdges(List<TEdges> edges) {
    this.edges = edges;
    return this;
  }

  public void unsetEdges() {
    this.edges = null;
  }

  /** Returns true if field edges is set (has been assigned a value) and false otherwise */
  public boolean isSetEdges() {
    return this.edges != null;
  }

  public void setEdgesIsSet(boolean value) {
    if (!value) {
      this.edges = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROPMAP:
      if (value == null) {
        unsetPropmap();
      } else {
        setPropmap((TPropertyMap)value);
      }
      break;

    case NODESTREAMS:
      if (value == null) {
        unsetNodestreams();
      } else {
        setNodestreams((List<TTypeStream>)value);
      }
      break;

    case EDGESTREAMS:
      if (value == null) {
        unsetEdgestreams();
      } else {
        setEdgestreams((List<TTypeStream>)value);
      }
      break;

    case NODES:
      if (value == null) {
        unsetNodes();
      } else {
        setNodes((List<TNodes>)value);
      }
      break;

    case EDGES:
      if (value == null) {
        unsetEdges();
      } else {
        setEdges((List<TEdges>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROPMAP:
      return getPropmap();

    case NODESTREAMS:
      return getNodestreams();

    case EDGESTREAMS:
      return getEdgestreams();

    case NODES:
      return getNodes();

    case EDGES:
      return getEdges();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROPMAP:
      return isSetPropmap();
    case NODESTREAMS:
      return isSetNodestreams();
    case EDGESTREAMS:
      return isSetEdgestreams();
    case NODES:
      return isSetNodes();
    case EDGES:
      return isSetEdges();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TDocument)
      return this.equals((TDocument)that);
    return false;
  }

  public boolean equals(TDocument that) {
    if (that == null)
      return false;

    boolean this_present_propmap = true && this.isSetPropmap();
    boolean that_present_propmap = true && that.isSetPropmap();
    if (this_present_propmap || that_present_propmap) {
      if (!(this_present_propmap && that_present_propmap))
        return false;
      if (!this.propmap.equals(that.propmap))
        return false;
    }

    boolean this_present_nodestreams = true && this.isSetNodestreams();
    boolean that_present_nodestreams = true && that.isSetNodestreams();
    if (this_present_nodestreams || that_present_nodestreams) {
      if (!(this_present_nodestreams && that_present_nodestreams))
        return false;
      if (!this.nodestreams.equals(that.nodestreams))
        return false;
    }

    boolean this_present_edgestreams = true && this.isSetEdgestreams();
    boolean that_present_edgestreams = true && that.isSetEdgestreams();
    if (this_present_edgestreams || that_present_edgestreams) {
      if (!(this_present_edgestreams && that_present_edgestreams))
        return false;
      if (!this.edgestreams.equals(that.edgestreams))
        return false;
    }

    boolean this_present_nodes = true && this.isSetNodes();
    boolean that_present_nodes = true && that.isSetNodes();
    if (this_present_nodes || that_present_nodes) {
      if (!(this_present_nodes && that_present_nodes))
        return false;
      if (!this.nodes.equals(that.nodes))
        return false;
    }

    boolean this_present_edges = true && this.isSetEdges();
    boolean that_present_edges = true && that.isSetEdges();
    if (this_present_edges || that_present_edges) {
      if (!(this_present_edges && that_present_edges))
        return false;
      if (!this.edges.equals(that.edges))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_propmap = true && (isSetPropmap());
    list.add(present_propmap);
    if (present_propmap)
      list.add(propmap);

    boolean present_nodestreams = true && (isSetNodestreams());
    list.add(present_nodestreams);
    if (present_nodestreams)
      list.add(nodestreams);

    boolean present_edgestreams = true && (isSetEdgestreams());
    list.add(present_edgestreams);
    if (present_edgestreams)
      list.add(edgestreams);

    boolean present_nodes = true && (isSetNodes());
    list.add(present_nodes);
    if (present_nodes)
      list.add(nodes);

    boolean present_edges = true && (isSetEdges());
    list.add(present_edges);
    if (present_edges)
      list.add(edges);

    return list.hashCode();
  }

  @Override
  public int compareTo(TDocument other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPropmap()).compareTo(other.isSetPropmap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPropmap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propmap, other.propmap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNodestreams()).compareTo(other.isSetNodestreams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodestreams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodestreams, other.nodestreams);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEdgestreams()).compareTo(other.isSetEdgestreams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEdgestreams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.edgestreams, other.edgestreams);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNodes()).compareTo(other.isSetNodes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodes, other.nodes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEdges()).compareTo(other.isSetEdges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEdges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.edges, other.edges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TDocument(");
    boolean first = true;

    if (isSetPropmap()) {
      sb.append("propmap:");
      if (this.propmap == null) {
        sb.append("null");
      } else {
        sb.append(this.propmap);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("nodestreams:");
    if (this.nodestreams == null) {
      sb.append("null");
    } else {
      sb.append(this.nodestreams);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("edgestreams:");
    if (this.edgestreams == null) {
      sb.append("null");
    } else {
      sb.append(this.edgestreams);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nodes:");
    if (this.nodes == null) {
      sb.append("null");
    } else {
      sb.append(this.nodes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("edges:");
    if (this.edges == null) {
      sb.append("null");
    } else {
      sb.append(this.edges);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (propmap != null) {
      propmap.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TDocumentStandardSchemeFactory implements SchemeFactory {
    public TDocumentStandardScheme getScheme() {
      return new TDocumentStandardScheme();
    }
  }

  private static class TDocumentStandardScheme extends StandardScheme<TDocument> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TDocument struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROPMAP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.propmap = new TPropertyMap();
              struct.propmap.read(iprot);
              struct.setPropmapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NODESTREAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list256 = iprot.readListBegin();
                struct.nodestreams = new ArrayList<TTypeStream>(_list256.size);
                TTypeStream _elem257;
                for (int _i258 = 0; _i258 < _list256.size; ++_i258)
                {
                  _elem257 = new TTypeStream();
                  _elem257.read(iprot);
                  struct.nodestreams.add(_elem257);
                }
                iprot.readListEnd();
              }
              struct.setNodestreamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EDGESTREAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list259 = iprot.readListBegin();
                struct.edgestreams = new ArrayList<TTypeStream>(_list259.size);
                TTypeStream _elem260;
                for (int _i261 = 0; _i261 < _list259.size; ++_i261)
                {
                  _elem260 = new TTypeStream();
                  _elem260.read(iprot);
                  struct.edgestreams.add(_elem260);
                }
                iprot.readListEnd();
              }
              struct.setEdgestreamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NODES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list262 = iprot.readListBegin();
                struct.nodes = new ArrayList<TNodes>(_list262.size);
                TNodes _elem263;
                for (int _i264 = 0; _i264 < _list262.size; ++_i264)
                {
                  _elem263 = new TNodes();
                  _elem263.read(iprot);
                  struct.nodes.add(_elem263);
                }
                iprot.readListEnd();
              }
              struct.setNodesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EDGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list265 = iprot.readListBegin();
                struct.edges = new ArrayList<TEdges>(_list265.size);
                TEdges _elem266;
                for (int _i267 = 0; _i267 < _list265.size; ++_i267)
                {
                  _elem266 = new TEdges();
                  _elem266.read(iprot);
                  struct.edges.add(_elem266);
                }
                iprot.readListEnd();
              }
              struct.setEdgesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TDocument struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.propmap != null) {
        if (struct.isSetPropmap()) {
          oprot.writeFieldBegin(PROPMAP_FIELD_DESC);
          struct.propmap.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.nodestreams != null) {
        oprot.writeFieldBegin(NODESTREAMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.nodestreams.size()));
          for (TTypeStream _iter268 : struct.nodestreams)
          {
            _iter268.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.edgestreams != null) {
        oprot.writeFieldBegin(EDGESTREAMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.edgestreams.size()));
          for (TTypeStream _iter269 : struct.edgestreams)
          {
            _iter269.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.nodes != null) {
        oprot.writeFieldBegin(NODES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.nodes.size()));
          for (TNodes _iter270 : struct.nodes)
          {
            _iter270.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.edges != null) {
        oprot.writeFieldBegin(EDGES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.edges.size()));
          for (TEdges _iter271 : struct.edges)
          {
            _iter271.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TDocumentTupleSchemeFactory implements SchemeFactory {
    public TDocumentTupleScheme getScheme() {
      return new TDocumentTupleScheme();
    }
  }

  private static class TDocumentTupleScheme extends TupleScheme<TDocument> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TDocument struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPropmap()) {
        optionals.set(0);
      }
      if (struct.isSetNodestreams()) {
        optionals.set(1);
      }
      if (struct.isSetEdgestreams()) {
        optionals.set(2);
      }
      if (struct.isSetNodes()) {
        optionals.set(3);
      }
      if (struct.isSetEdges()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetPropmap()) {
        struct.propmap.write(oprot);
      }
      if (struct.isSetNodestreams()) {
        {
          oprot.writeI32(struct.nodestreams.size());
          for (TTypeStream _iter272 : struct.nodestreams)
          {
            _iter272.write(oprot);
          }
        }
      }
      if (struct.isSetEdgestreams()) {
        {
          oprot.writeI32(struct.edgestreams.size());
          for (TTypeStream _iter273 : struct.edgestreams)
          {
            _iter273.write(oprot);
          }
        }
      }
      if (struct.isSetNodes()) {
        {
          oprot.writeI32(struct.nodes.size());
          for (TNodes _iter274 : struct.nodes)
          {
            _iter274.write(oprot);
          }
        }
      }
      if (struct.isSetEdges()) {
        {
          oprot.writeI32(struct.edges.size());
          for (TEdges _iter275 : struct.edges)
          {
            _iter275.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TDocument struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.propmap = new TPropertyMap();
        struct.propmap.read(iprot);
        struct.setPropmapIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list276 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.nodestreams = new ArrayList<TTypeStream>(_list276.size);
          TTypeStream _elem277;
          for (int _i278 = 0; _i278 < _list276.size; ++_i278)
          {
            _elem277 = new TTypeStream();
            _elem277.read(iprot);
            struct.nodestreams.add(_elem277);
          }
        }
        struct.setNodestreamsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list279 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.edgestreams = new ArrayList<TTypeStream>(_list279.size);
          TTypeStream _elem280;
          for (int _i281 = 0; _i281 < _list279.size; ++_i281)
          {
            _elem280 = new TTypeStream();
            _elem280.read(iprot);
            struct.edgestreams.add(_elem280);
          }
        }
        struct.setEdgestreamsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list282 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.nodes = new ArrayList<TNodes>(_list282.size);
          TNodes _elem283;
          for (int _i284 = 0; _i284 < _list282.size; ++_i284)
          {
            _elem283 = new TNodes();
            _elem283.read(iprot);
            struct.nodes.add(_elem283);
          }
        }
        struct.setNodesIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list285 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.edges = new ArrayList<TEdges>(_list285.size);
          TEdges _elem286;
          for (int _i287 = 0; _i287 < _list285.size; ++_i287)
          {
            _elem286 = new TEdges();
            _elem286.read(iprot);
            struct.edges.add(_elem286);
          }
        }
        struct.setEdgesIsSet(true);
      }
    }
  }

}


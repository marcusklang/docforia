/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package se.lth.cs.docforia.io.thrift;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-11-03")
public class TPropertyMap implements org.apache.thrift.TBase<TPropertyMap, TPropertyMap._Fields>, java.io.Serializable, Cloneable, Comparable<TPropertyMap> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPropertyMap");

  private static final org.apache.thrift.protocol.TField PROPKEYS_FIELD_DESC = new org.apache.thrift.protocol.TField("propkeys", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField PROPVALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("propvalues", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPropertyMapStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPropertyMapTupleSchemeFactory());
  }

  public List<TPropertyKey> propkeys; // required
  public List<TPropertyValue> propvalues; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROPKEYS((short)1, "propkeys"),
    PROPVALUES((short)2, "propvalues");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROPKEYS
          return PROPKEYS;
        case 2: // PROPVALUES
          return PROPVALUES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROPKEYS, new org.apache.thrift.meta_data.FieldMetaData("propkeys", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPropertyKey.class))));
    tmpMap.put(_Fields.PROPVALUES, new org.apache.thrift.meta_data.FieldMetaData("propvalues", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPropertyValue.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPropertyMap.class, metaDataMap);
  }

  public TPropertyMap() {
  }

  public TPropertyMap(
    List<TPropertyKey> propkeys,
    List<TPropertyValue> propvalues)
  {
    this();
    this.propkeys = propkeys;
    this.propvalues = propvalues;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPropertyMap(TPropertyMap other) {
    if (other.isSetPropkeys()) {
      List<TPropertyKey> __this__propkeys = new ArrayList<TPropertyKey>(other.propkeys.size());
      for (TPropertyKey other_element : other.propkeys) {
        __this__propkeys.add(new TPropertyKey(other_element));
      }
      this.propkeys = __this__propkeys;
    }
    if (other.isSetPropvalues()) {
      List<TPropertyValue> __this__propvalues = new ArrayList<TPropertyValue>(other.propvalues.size());
      for (TPropertyValue other_element : other.propvalues) {
        __this__propvalues.add(new TPropertyValue(other_element));
      }
      this.propvalues = __this__propvalues;
    }
  }

  public TPropertyMap deepCopy() {
    return new TPropertyMap(this);
  }

  @Override
  public void clear() {
    this.propkeys = null;
    this.propvalues = null;
  }

  public int getPropkeysSize() {
    return (this.propkeys == null) ? 0 : this.propkeys.size();
  }

  public java.util.Iterator<TPropertyKey> getPropkeysIterator() {
    return (this.propkeys == null) ? null : this.propkeys.iterator();
  }

  public void addToPropkeys(TPropertyKey elem) {
    if (this.propkeys == null) {
      this.propkeys = new ArrayList<TPropertyKey>();
    }
    this.propkeys.add(elem);
  }

  public List<TPropertyKey> getPropkeys() {
    return this.propkeys;
  }

  public TPropertyMap setPropkeys(List<TPropertyKey> propkeys) {
    this.propkeys = propkeys;
    return this;
  }

  public void unsetPropkeys() {
    this.propkeys = null;
  }

  /** Returns true if field propkeys is set (has been assigned a value) and false otherwise */
  public boolean isSetPropkeys() {
    return this.propkeys != null;
  }

  public void setPropkeysIsSet(boolean value) {
    if (!value) {
      this.propkeys = null;
    }
  }

  public int getPropvaluesSize() {
    return (this.propvalues == null) ? 0 : this.propvalues.size();
  }

  public java.util.Iterator<TPropertyValue> getPropvaluesIterator() {
    return (this.propvalues == null) ? null : this.propvalues.iterator();
  }

  public void addToPropvalues(TPropertyValue elem) {
    if (this.propvalues == null) {
      this.propvalues = new ArrayList<TPropertyValue>();
    }
    this.propvalues.add(elem);
  }

  public List<TPropertyValue> getPropvalues() {
    return this.propvalues;
  }

  public TPropertyMap setPropvalues(List<TPropertyValue> propvalues) {
    this.propvalues = propvalues;
    return this;
  }

  public void unsetPropvalues() {
    this.propvalues = null;
  }

  /** Returns true if field propvalues is set (has been assigned a value) and false otherwise */
  public boolean isSetPropvalues() {
    return this.propvalues != null;
  }

  public void setPropvaluesIsSet(boolean value) {
    if (!value) {
      this.propvalues = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROPKEYS:
      if (value == null) {
        unsetPropkeys();
      } else {
        setPropkeys((List<TPropertyKey>)value);
      }
      break;

    case PROPVALUES:
      if (value == null) {
        unsetPropvalues();
      } else {
        setPropvalues((List<TPropertyValue>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROPKEYS:
      return getPropkeys();

    case PROPVALUES:
      return getPropvalues();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROPKEYS:
      return isSetPropkeys();
    case PROPVALUES:
      return isSetPropvalues();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPropertyMap)
      return this.equals((TPropertyMap)that);
    return false;
  }

  public boolean equals(TPropertyMap that) {
    if (that == null)
      return false;

    boolean this_present_propkeys = true && this.isSetPropkeys();
    boolean that_present_propkeys = true && that.isSetPropkeys();
    if (this_present_propkeys || that_present_propkeys) {
      if (!(this_present_propkeys && that_present_propkeys))
        return false;
      if (!this.propkeys.equals(that.propkeys))
        return false;
    }

    boolean this_present_propvalues = true && this.isSetPropvalues();
    boolean that_present_propvalues = true && that.isSetPropvalues();
    if (this_present_propvalues || that_present_propvalues) {
      if (!(this_present_propvalues && that_present_propvalues))
        return false;
      if (!this.propvalues.equals(that.propvalues))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_propkeys = true && (isSetPropkeys());
    list.add(present_propkeys);
    if (present_propkeys)
      list.add(propkeys);

    boolean present_propvalues = true && (isSetPropvalues());
    list.add(present_propvalues);
    if (present_propvalues)
      list.add(propvalues);

    return list.hashCode();
  }

  @Override
  public int compareTo(TPropertyMap other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPropkeys()).compareTo(other.isSetPropkeys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPropkeys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propkeys, other.propkeys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPropvalues()).compareTo(other.isSetPropvalues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPropvalues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propvalues, other.propvalues);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPropertyMap(");
    boolean first = true;

    sb.append("propkeys:");
    if (this.propkeys == null) {
      sb.append("null");
    } else {
      sb.append(this.propkeys);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("propvalues:");
    if (this.propvalues == null) {
      sb.append("null");
    } else {
      sb.append(this.propvalues);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPropertyMapStandardSchemeFactory implements SchemeFactory {
    public TPropertyMapStandardScheme getScheme() {
      return new TPropertyMapStandardScheme();
    }
  }

  private static class TPropertyMapStandardScheme extends StandardScheme<TPropertyMap> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPropertyMap struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROPKEYS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                struct.propkeys = new ArrayList<TPropertyKey>(_list80.size);
                TPropertyKey _elem81;
                for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                {
                  _elem81 = new TPropertyKey();
                  _elem81.read(iprot);
                  struct.propkeys.add(_elem81);
                }
                iprot.readListEnd();
              }
              struct.setPropkeysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROPVALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list83 = iprot.readListBegin();
                struct.propvalues = new ArrayList<TPropertyValue>(_list83.size);
                TPropertyValue _elem84;
                for (int _i85 = 0; _i85 < _list83.size; ++_i85)
                {
                  _elem84 = new TPropertyValue();
                  _elem84.read(iprot);
                  struct.propvalues.add(_elem84);
                }
                iprot.readListEnd();
              }
              struct.setPropvaluesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPropertyMap struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.propkeys != null) {
        oprot.writeFieldBegin(PROPKEYS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.propkeys.size()));
          for (TPropertyKey _iter86 : struct.propkeys)
          {
            _iter86.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.propvalues != null) {
        oprot.writeFieldBegin(PROPVALUES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.propvalues.size()));
          for (TPropertyValue _iter87 : struct.propvalues)
          {
            _iter87.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPropertyMapTupleSchemeFactory implements SchemeFactory {
    public TPropertyMapTupleScheme getScheme() {
      return new TPropertyMapTupleScheme();
    }
  }

  private static class TPropertyMapTupleScheme extends TupleScheme<TPropertyMap> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPropertyMap struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPropkeys()) {
        optionals.set(0);
      }
      if (struct.isSetPropvalues()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetPropkeys()) {
        {
          oprot.writeI32(struct.propkeys.size());
          for (TPropertyKey _iter88 : struct.propkeys)
          {
            _iter88.write(oprot);
          }
        }
      }
      if (struct.isSetPropvalues()) {
        {
          oprot.writeI32(struct.propvalues.size());
          for (TPropertyValue _iter89 : struct.propvalues)
          {
            _iter89.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPropertyMap struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list90 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.propkeys = new ArrayList<TPropertyKey>(_list90.size);
          TPropertyKey _elem91;
          for (int _i92 = 0; _i92 < _list90.size; ++_i92)
          {
            _elem91 = new TPropertyKey();
            _elem91.read(iprot);
            struct.propkeys.add(_elem91);
          }
        }
        struct.setPropkeysIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.propvalues = new ArrayList<TPropertyValue>(_list93.size);
          TPropertyValue _elem94;
          for (int _i95 = 0; _i95 < _list93.size; ++_i95)
          {
            _elem94 = new TPropertyValue();
            _elem94.read(iprot);
            struct.propvalues.add(_elem94);
          }
        }
        struct.setPropvaluesIsSet(true);
      }
    }
  }

}


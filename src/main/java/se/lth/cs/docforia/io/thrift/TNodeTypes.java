/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package se.lth.cs.docforia.io.thrift;


public enum TNodeTypes implements org.apache.thrift.TEnum {
  TOKEN(0),
  SENTENCE(1),
  PARAGRAPH(2),
  ANCHOR(3),
  SECTION(4),
  ABSTRACT(5),
  HEADING(6),
  CLAUSE(7),
  PHRASE(8),
  PREDICATE(9),
  ARGUMENT(10),
  PROPOSITION(11),
  ENTITY(12),
  NAMED_ENTITY(13),
  COREF_MENTION(14),
  COREF_CHAIN(15),
  MENTION(16),
  ENTITY_DISAMBIGUATION(17),
  NAMED_ENTITY_DISAMBIGUATION(18),
  SENSE_DISAMBIGUATION(19),
  COMPOUND(20),
  LIST_ITEM(21),
  LIST_SECTION(22),
  TABLE_OF_CONTENTS(23),
  AST_NODE(24),
  AST_TEXT_NODE(25),
  PARSE_TREE_NODE(26);

  private final int value;

  private TNodeTypes(int value) {
    this.value = value;
  }

  /**
   * Get the integer value of this enum value, as defined in the Thrift IDL.
   */
  public int getValue() {
    return value;
  }

  /**
   * Find a the enum type by its integer value, as defined in the Thrift IDL.
   * @return null if the value is not found.
   */
  public static TNodeTypes findByValue(int value) { 
    switch (value) {
      case 0:
        return TOKEN;
      case 1:
        return SENTENCE;
      case 2:
        return PARAGRAPH;
      case 3:
        return ANCHOR;
      case 4:
        return SECTION;
      case 5:
        return ABSTRACT;
      case 6:
        return HEADING;
      case 7:
        return CLAUSE;
      case 8:
        return PHRASE;
      case 9:
        return PREDICATE;
      case 10:
        return ARGUMENT;
      case 11:
        return PROPOSITION;
      case 12:
        return ENTITY;
      case 13:
        return NAMED_ENTITY;
      case 14:
        return COREF_MENTION;
      case 15:
        return COREF_CHAIN;
      case 16:
        return MENTION;
      case 17:
        return ENTITY_DISAMBIGUATION;
      case 18:
        return NAMED_ENTITY_DISAMBIGUATION;
      case 19:
        return SENSE_DISAMBIGUATION;
      case 20:
        return COMPOUND;
      case 21:
        return LIST_ITEM;
      case 22:
        return LIST_SECTION;
      case 23:
        return TABLE_OF_CONTENTS;
      case 24:
        return AST_NODE;
      case 25:
        return AST_TEXT_NODE;
      case 26:
        return PARSE_TREE_NODE;
      default:
        return null;
    }
  }
}
